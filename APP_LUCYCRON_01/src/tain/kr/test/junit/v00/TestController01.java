/**
 * Copyright 2014, 2015, 2016, 2017 TAIN, Inc. all rights reserved.
 *
 * Licensed under the GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * -----------------------------------------------------------------
 * Copyright 2014, 2015, 2016, 2017 TAIN, Inc.
 *
 */
package tain.kr.test.junit.v00;

import java.util.HashMap;
import java.util.Map;

/**
 * Code Templates > Comments > Types
 *
 * <PRE>
 *   -. FileName   : TestController01.java
 *   -. Package    : tain.kr.test.junit.v00
 *   -. Comment    :
 *   -. Author     : taincokr
 *   -. First Date : 2017. 4. 12. {time}
 * </PRE>
 *
 * @author taincokr
 *
 */
public final class TestController01 {

	///////////////////////////////////////////////////////////////////////////////////////////////
	
	private final class RequestTest implements ImpRequest {
		
		private String name;
		
		public RequestTest(String name) {
			this.name = name;
		}
		
		@Override
		public String getName() {
			return this.name;
		}
		
		public int hashCode() {
			return this.name.hashCode();
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	private final class ResponseTest implements ImpResponse {
		
		private String name;
		
		public ResponseTest(String name) {
			this.name = name;
		}
		
		@Override
		public String getName() {
			return this.name;
		}
		
		public int hashCode() {
			return this.name.hashCode();
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	private final class RequestHandlerTest implements ImpRequestHandler {
		
		@Override
		public ImpResponse process(ImpRequest request) throws Exception {
			return new ResponseTest(request.getName());
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	private final class ExceptionHandler implements ImpRequestHandler {
		
		@Override
		public ImpResponse process(ImpRequest request) throws Exception {
			throw new Exception("error event in processing request.");
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	
	private final class ControllerTest implements ImpController {
		
		private Map<String, ImpRequestHandler> map = new HashMap<String, ImpRequestHandler>();
		
		@Override
		public void addHandler(ImpRequest request, ImpRequestHandler handler) {
			
			if (this.map.containsKey(request.getName())) {
				throw new RuntimeException(String.format("a request handler has already been registered for request name [%s]", request.getName()));
			} else {
				this.map.put(request.getName(), handler);
			}
		}
		
		@Override
		public ImpRequestHandler getHandler(ImpRequest request) {
			
			if (!this.map.containsKey(request.getName())) {
				throw new RuntimeException(String.format("", request.getName()));
			}
			
		}
		
		@Override
		public ImpResponse getResponse(ImpRequest request) {
			
		}
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////
}
